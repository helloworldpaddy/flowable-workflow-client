<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.20.xsd">

    <changeSet id="001-baseline-existing-data" author="cms-system" runOnChange="false">
        <comment>Baseline for existing data migration - Mark as executed if migrating from existing system</comment>
        
        <!-- This changeset serves as a baseline for existing installations -->
        <!-- If migrating from an existing system, mark this as executed -->
        <sql>
            -- Insert migration tracking record
            INSERT INTO cms_flowable_workflow.system_configuration (config_key, config_value, config_description, config_type, is_system, environment)
            VALUES ('migration.legacy_baseline', to_char(NOW(), 'YYYY-MM-DD HH24:MI:SS'), 'Legacy data migration baseline timestamp', 'STRING', true, 'ALL')
            ON CONFLICT (config_key) DO NOTHING;
        </sql>

        <rollback>
            <delete tableName="system_configuration" schemaName="cms_flowable_workflow">
                <where>config_key = 'migration.legacy_baseline'</where>
            </delete>
        </rollback>
    </changeSet>

    <changeSet id="002-migrate-existing-users" author="cms-system" runOnChange="false" runAlways="false">
            <preConditions onFail="MARK_RAN">
            <tableExists tableName="legacy_users" schemaName="cms_flowable_workflow"/>
        </preConditions>
        <comment>Template for migrating existing user data</comment>

        
        <!-- Example migration from legacy table -->
        <sql>
            -- Migrate existing users if legacy table exists
            INSERT INTO cms_flowable_workflow.users 
            (username, email, password_hash, first_name, last_name, user_status, created_at, updated_at)
            SELECT 
                username, 
                email, 
                password_hash, 
                first_name, 
                last_name, 
                'ACTIVE'::cms_flowable_workflow.user_status_enum,
                created_at, 
                updated_at
            FROM cms_flowable_workflow.legacy_users
            WHERE NOT EXISTS (
                SELECT 1 FROM cms_flowable_workflow.users u 
                WHERE u.username = legacy_users.username
            );
        </sql>

        <rollback>
            <!-- Rollback would need to be customized based on actual legacy data -->
            <sql>
                DELETE FROM cms_flowable_workflow.users 
                WHERE created_at >= (SELECT config_value::timestamp FROM cms_flowable_workflow.system_configuration WHERE config_key = 'migration.legacy_baseline');
            </sql>
        </rollback>
    </changeSet>

    <changeSet id="003-migrate-existing-cases" author="cms-system" runOnChange="false" runAlways="false">
            <preConditions onFail="MARK_RAN">
            <tableExists tableName="legacy_cases" schemaName="cms_flowable_workflow"/>
        </preConditions>
        <comment>Template for migrating existing case data</comment>

        
        <!-- Example migration from legacy cases -->
        <sql>
            -- Migrate existing cases if legacy table exists
            INSERT INTO cms_flowable_workflow.cases 
            (case_id, case_number, title, description, priority, status, complainant_name, complainant_email, created_at, updated_at)
            SELECT 
                case_id,
                case_number,
                title,
                description,
                priority::cms_flowable_workflow.priority_enum,
                status::cms_flowable_workflow.case_status_enum,
                complainant_name,
                complainant_email,
                created_at,
                updated_at
            FROM cms_flowable_workflow.legacy_cases
            WHERE NOT EXISTS (
                SELECT 1 FROM cms_flowable_workflow.cases c 
                WHERE c.case_id = legacy_cases.case_id
            );
        </sql>

        <rollback>
            <sql>
                DELETE FROM cms_flowable_workflow.cases 
                WHERE created_at >= (SELECT config_value::timestamp FROM cms_flowable_workflow.system_configuration WHERE config_key = 'migration.legacy_baseline');
            </sql>
        </rollback>
    </changeSet>

    <changeSet id="004-cleanup-legacy-tables" author="cms-system" runOnChange="false" runAlways="false">
    <preConditions onFail="MARK_RAN">
            <and>
                <tableExists tableName="legacy_users" schemaName="cms_flowable_workflow"/>
                <tableExists tableName="legacy_cases" schemaName="cms_flowable_workflow"/>
            </and>
        </preConditions>
        <comment>Cleanup legacy tables after migration (USE WITH CAUTION)</comment>
        
        
        <!-- Rename legacy tables instead of dropping them for safety -->
        <sql>
            ALTER TABLE cms_flowable_workflow.legacy_users RENAME TO legacy_users_migrated_backup;
            ALTER TABLE cms_flowable_workflow.legacy_cases RENAME TO legacy_cases_migrated_backup;
            
            -- Log the cleanup
            INSERT INTO cms_flowable_workflow.system_configuration (config_key, config_value, config_description, config_type, is_system, environment)
            VALUES ('migration.legacy_cleanup', to_char(NOW(), 'YYYY-MM-DD HH24:MI:SS'), 'Legacy tables renamed for backup', 'STRING', true, 'ALL');
        </sql>

        <rollback>
            <sql>
                ALTER TABLE cms_flowable_workflow.legacy_users_migrated_backup RENAME TO legacy_users;
                ALTER TABLE cms_flowable_workflow.legacy_cases_migrated_backup RENAME TO legacy_cases;
                DELETE FROM cms_flowable_workflow.system_configuration WHERE config_key = 'migration.legacy_cleanup';
            </sql>
        </rollback>
    </changeSet>

</databaseChangeLog>